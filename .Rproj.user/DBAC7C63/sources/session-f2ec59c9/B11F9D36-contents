---
title: "Data Analysis: Regression modelling"
output: webexercises::webexercises_default
---

```{r setupSLR, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, comment = NA)
library(webexercises)
library(ggplot2)
library(dplyr)
library(moderndive)
library(gapminder)
library(skimr)
library(mvtnorm)
library(gridExtra)
library(tidyr)
evals.scores <- evals %>%
 select(score, bty_avg)
model <- lm(score ~ bty_avg, data = evals.scores)
regression.points <- get_regression_points(model)
gapminder2007 <- gapminder %>%
 filter(year == 2007) %>% 
 select(country, continent, lifeExp)
lifeExp.model <- lm(lifeExp ~ continent, data = gapminder2007)
lifeExp.continent <- gapminder2007 %>%
 group_by(continent) %>%
 summarize(median = median(lifeExp), mean = mean(lifeExp))
lifeExp.by.continent <- gapminder2007 %>%
 group_by(continent) %>%
 summarize(median = median(lifeExp), mean = mean(lifeExp))
mean.africa <- lifeExp.by.continent %>%
 filter(continent == "Africa") %>%
 pull(mean)
regression_points <- get_regression_points(lifeExp.model)
```

```{r setupMLR, include=FALSE}
library(ggplot2)
library(dplyr)
library(moderndive)
library(ISLR)
library(skimr)
library(plotly)
library(tidyr)
library(datasets)
library(jtools)
Cred <- Credit %>%
  select(Balance, Limit, Income)
Balance.model <- lm(Balance ~ Limit + Income, data = Cred)
eval.score <- evals %>%
  select(score, age, gender)
par.model <- lm(score ~ age + gender, data = eval.score)
coeff  <- par.model %>% 
          coef() %>%
          as.numeric()
  
slopes <- eval.score %>%
  group_by(gender) %>%
  summarise(min = min(age), max = max(age)) %>%
  mutate(intercept = coeff[1]) %>%
  mutate(intercept = ifelse(gender == "male", intercept + coeff[3], intercept)) %>%
  gather(point, age, -c(gender, intercept)) %>%
  mutate(y_hat = intercept + age * coeff[2])
int.model <- lm(score ~ age * gender, data = eval.score)
regression.points <- get_regression_points(int.model)
knitr::opts_chunk$set(echo = FALSE, comment = NA)
```


# Introduction {-}

**Now that you are familiar with RMarkdown, you are encouraged to collate your work in this lab in a RMarkdown file.  Complete the lab from this week and subsequent weeks in a `.Rmd` file.**

Now that we have covered visualising and manipulating data in R, we can now proceed to modelling data. The key idea behind modelling data is to infer the relationship between an:

  * **outcome (or response) variable** $y$ and
  * an **explanatory (or predictor) variable** $x$, which can also be referred to as an **independent variable** or **covariate**.

Modelling can be used for two purposes:

1. **Explanation**: For describing the relationship between an outcome variable $y$ and an explanatory variable $x$, and determining the potential significance of such relationships using quantifiable measures.

2. **Prediction**: for predicting the outcome variable $y$ given information from one or more explanatory variables.

There are many different modelling techniques. However, we will begin with one of the easier to understand and commonly-used approaches, **linear regression**. In particular, we will start by looking at **simple linear regression**, where we only have one explanatory variable.

**Note**: Additional information and examples can be found in [Chapter 5](https://moderndive.com/5-regression.html) of [Statistical Inference via Data Science](https://moderndive.com/index.html).

<br>
<br>


# Simple linear regression {-}

For a response variable $y$ and an explanatory variable $x$, the data can be expressed as:

$$(y_i, x_i), ~~~~ i = 1,\ldots,n.$$
That is, we have $n$ observations of $y$ and $x$. A statistical model is a mathematical statement describing the variability in a random variable $y$, which includes any relationship with the explanatory variable $x$. The inclusion of random (unpredictable) components $\epsilon$, makes the model statistical, rather than deterministic. A simple linear regression model involves, as the name suggests, fitting a linear regression line to the data. Hence, a simple linear regression model can be written as follows:

$$y_i = \alpha + \beta x_i + \epsilon_i, ~~~~ \epsilon_i \sim N(0, \sigma^2),$$
where

  * $y_i$ is the $i^{th}$ observation of the response variable;
  * $\alpha$ is the **intercept** of the regression line;
  * $\beta$ is the **slope** of the regression line;
  * $x_i$ is the $i^{th}$ observation of the explanatory variable; and
  * $\epsilon_i$ is the $i^{th}$ random component.

The random components, $\epsilon_i$, are normally distributed with mean zero and constant variance $\sigma^2$, such that we are essentially adding random white noise to the deterministic part of the model ($\alpha + \beta x_i$). Thus, the full probability model for $y_i$ given $x_i$ ($y_i | x_i$) can be written as

$$y_i | x_i \sim N(\alpha + \beta x_i, \sigma^2).$$

Hence, the mean comes from the deterministic part of the model, while the variance comes from the random part. We shall now look into fitting a simple linear regression model to some data.


# Simple linear regression with one numerical explanatory variable {-}

Create a `.Rmd` file to load the following packages into R:

```{r libraries, echo = TRUE, eval = TRUE, warning = FALSE, message = FALSE}
library(ggplot2)
library(dplyr)
library(moderndive)
library(gapminder)
library(skimr)
```

```{r libraries2, echo = FALSE, eval = TRUE, warning = FALSE, message = FALSE}
library(mvtnorm)
library(gridExtra)
library(tidyr)
```

Student feedback in higher education is extremely important when it comes to the evaluation of teaching techniques, materials, and improvements in teaching methods and technologies. However, there have been studies into potential bias factors when feedback is provided, such as the physical appearance of the teacher; see [Economics of Education Review](https://www.journals.elsevier.com/economics-of-education-review/) for details. Here, we shall look at a study from student evaluations of $n=463$ professors from The University of Texas at Austin. In particular, we will examine the evaluation scores of the instructors based purely on one numerical variable: their *beauty score*. Therefore, our simple linear regression model will consist of:

  * the numerical outcome variable *teaching score* ($y$); and
  * the numerical explanatory variable *beauty score* ($x$).

## Exploratory data analysis {-}

Before you ever do any statistical modelling of data, you should always perform an **exploratory data analysis** of the data. Performing an exploratory data analysis can give us an idea of the distribution of the data, and whether it contains any strange values, such as **outliers** or **missing values**. However, more importantly, it is used to inform which statistical model we should fit to the data. An exploratory data analysis may involve:

1. Looking at the raw values of the data, either by looking at the spreadsheet directly, or using R.
2. By computing various summary statistics, such as the *five-number summary*, means, and standard deviations.
3. Plotting the data using various data visualisation techniques.

Let's examine the data `evals`. We can look at the raw values from `evals` using the RStudio pop-up spreadsheet viewer using:

```{r view, echo = TRUE, eval = FALSE, warning = FALSE}
View(evals)
```

<br>

**Task**: Use other functions you have learned to have a peek at the `evals` data set.

`r hide("Hint")`
You may want to use the `glimpse` and `head` functions.
`r unhide()`

```{r Task1-solution, webex.hide="Solution", echo=TRUE, eval=TRUE}
head(evals)
glimpse(evals)
```

```{r MCQ1}
opts_Q1 <- sample(c("13",
                    answer = "463",
                    "512",
                    "18"))
```

<br>

**How many observations are in the `evals` data set?**
`r longmcq(opts_Q1)`

<br>

At the moment we are only really interested in the instructors teaching (`score`) and beauty (`bty_avg`) scores, and so we can look at a subset of the data as follows:

```{r evals, echo = TRUE, eval = TRUE, warning = FALSE}
evals.scores <- evals %>%
  select(score, bty_avg)
```

<br>

**Task**: Replace the `select` function with the `sample_n` function to look at a random subset of 10 instructors.

```{r Task2-solution, webex.hide="Solution", echo=TRUE, eval=TRUE}
evals %>%
  sample_n(10)
```

<br>

The outcome variable `score` is a numerical average of the average teaching score based on students' evaluations between 1 and 5. The explanatory variable `bty_avg` is the numerical variable of the average beauty score from a panel of six students' scores between 1 and 10. As both variables are numerical, we can compute summary statistics for them using the `skim` function from the `skimr` package as follows:

```{r evals3, echo = TRUE, eval = TRUE, warning = FALSE}
evals.scores %>%
  skim()
```

This provides us with the following information:

  * `missing`: the number of missing values.
  * `complete`: the number of non-missing values.
  * `n`: the total number of observations.
  * `mean`: the mean or average.
  * `sd`: the standard deviation.
  * `p0`: the $0^{th}$ percentile: the value at which 0% of values are smaller than it (i.e.\ the *minimum*).
  * `p25`: the $25^{th}$ percentile: the value at which 25% of values are smaller than it (i.e.\ the *1st quartile*).
  * `p50`: the $50^{th}$ percentile: the value at which 50% of values are smaller than it (i.e.\ the *median*).
  * `p75`: the $75^{th}$ percentile: the value at which 75% of values are smaller than it (i.e.\ the *3rd quartile*).
  * `p100`: the $100^{th}$ percentile: the value at which 100% of values are smaller than it (i.e.\ the *maximum*).
  * `hist`: provides a snapshot of a histogram of the variable.

These summary statistics give us an idea of how both variables are distributed. For example, the mean teaching score (`score`) is 4.17 out 5, while the mean beauty score (`bty_avg`) is 4.42 out of 10. Also, the middle 50% of the data for `score` lies between 3.8 and 4.6, while the middle 50% of `bty_avg` lies between 3.17 and 5.5.

```{r MCQ2}
opts_Q2 <- sample(c("2.5",
                    answer = "2.3",
                    "1.6",
                    "1.7"))
```

<br>

**What is the minimum value of teaching score (`score`)?**
`r longmcq(opts_Q2)`

<br>

```{r MCQ3}
opts_Q3 <- sample(c("5.0",
                    answer = "8.2",
                    "8.4",
                    "5.2"))
```

**What is the maximum value of beauty score (`bty_avg`)?**
`r longmcq(opts_Q3)`

<br>
<br>


## Correlation {-}

The above summary statistics provide information about each variable separately. However, we are interested in a potential relationship between the two variables and as such it would be of interest to evaluate some statistic that considers both variables simultaneously. One such statistic is the **correlation**, which ranges between -1 and 1 and describes the strength of the linear relationship between two numerical variables, such that

  * -1 indicates a perfect *negative relationship*. That is, as the values of one variable increase, the values of the other decrease.
  * 0 indicates no relationship. The values of both variables increase/decrease independently of one another.
  * 1 indicates a perfect *positive relationship*. That is, the values of both variables increase simultaneously.

The plot below displays scatterplots for hypothetical numerical variables $x$ and $y$ simulated to have different levels of correlation.

```{r correlation, echo = FALSE, eval = TRUE, warning = FALSE}
correlation <- c(-0.9999, -0.75, 0, 0.75, 0.9999)
cor_names <- c(`-1` = "(a)", `-0.75` = "(b)", `0` = "(c)", `0.75` = "(d)", `1` = "(e)")

n_sim <- 100

values <- NULL
for(i in seq_len(length(correlation))){
  rho <- correlation[i]
  sigma <- matrix(c(5, rho * sqrt(50), rho * sqrt(50), 10), 2, 2)
  sim <- rmvnorm(
    n = n_sim,
    mean = c(20,40),
    sigma = sigma
    ) %>%
    as_data_frame() %>%
    # mutate(correlation = round(rho, 2), name = as.character(rep(names(correlation)[i], n_sim)))
        mutate(correlation = round(rho, 2))

  values <- bind_rows(values, sim)
}
```

```{r correlation2, echo = FALSE, eval = TRUE, warning = FALSE, out.width = '100%', fig.align = "center", fig.cap = "Figure 1: Differing levels of correlation between variables."}
ggplot(data = values, mapping = aes(V1, V2)) +
  geom_point() +
  facet_wrap(~ correlation, nrow = 2, labeller = as_labeller(cor_names)) +
  labs(x = "x", y = "y") +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank()
  )
```

```{r MCQ4}
opts_Q4 <- sample(c("(a) and (b)",
                    answer = "(d) and (e)",
                    "(c) and (d)",
                    "(c) and (e)"))
```

<br>

**Which plots (a)-(e) display positive correlation?**
`r longmcq(opts_Q4)`

```{r MCQ5}
opts_Q5 <- sample(c("(d) and (e)",
                    answer = "(a) and (b)",
                    "(b) and (c)",
                    "(a) and (c)"))
```

<br>

**Which plots (a)-(e) display negative correlation?**
`r longmcq(opts_Q5)`

<br>

The correlation coefficient can be computed in R using the `get_correlation` function from the `moderndive` package. The function requires two numerical variables separated by `~` (or 'tilde'), much like the formula syntax, such that the outcome variable `score` is put on the left-hand-side of the formula, and the explanatory variable `bty_avg` is placed on the right-hand-side of the formula:

```{r correlation3, echo = TRUE, eval = TRUE, warning = FALSE}
evals.scores %>%
  get_correlation(formula = score ~ bty_avg)
```

Here, we are given a correlation coefficient of 0.187 for the relationship between teaching (`score`) and beauty (`bty_avg`) scores. This suggests a rather *weakly positive* linear relationship between the two variables. There is some subjective interpretation surrounding correlation coefficients not very close to -1, 0, 1. The table below provides a rough guide as to the verbal interpretation of a correlation coefficient.

Correlation coefficient | Verbal interpretation
:-----------------------|:----------------------
0.90 to 1.00 (-0.90 to -1.00) | Very strong positive (negative) correlation
0.70 to 0.90 (-0.70 to -0.90) | Strong positive (negative) correlation
0.50 to 0.70 (-0.50 to -0.70) | Moderate positive (negative) correlation
0.30 to 0.50 (-0.30 to -0.50) | Weak positive (negative) correlation
0.00 to 0.30 (0.00 to -0.30) | Very weak positive (negative) correlation

**Note**: the `cor` function can also be used to compute the correlation coefficient. For more details type `?cor` into the R console.

The next step in our exploratory data analysis is to visualise the data using appropriate plotting techniques. Here, a scatterplot is appropriate since both `score` and `bty_avg` are numerical variables:

```{r correlation4, echo = TRUE, eval = FALSE}
ggplot(evals.scores, aes(x = bty_avg, y = score)) +
  geom_point()
```

```{r correlationplot, echo = FALSE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 2: Relationship between teaching and beauty scores."}
ggplot(evals.scores, aes(x = bty_avg, y = score)) +
  geom_point() +
  labs(x = "Beauty Score", y = "Teaching Score", 
       title = "Relationship of teaching and beauty scores")
```

<br>

**Task**: Update the above code to give the plot more appropriate axes labels and a title similar to the scatterplot above.

`r hide("Hint")`
You need to include the `labs` layer and provide it with the `x`, `y` and `title` arguments.
**Note**: the outcome variable should always be plotted on the y-axis.
`r unhide()`

```{r Task3-solution, webex.hide="Solution", echo=TRUE, eval=TRUE}
ggplot(evals.scores, aes(x = bty_avg, y = score)) +
  geom_point() +
  labs(x = "Beauty Score", y = "Teaching Score", 
       title = "Relationship of teaching and beauty scores")
```

<br>

What can we observe from the scatterplot? Well, here it can be hard to see the weakly positive linear relationship suggested by the correlation coefficient (0.187), which is why our correlation coefficient is considered *very weak* in the verbal interpretation.

Additionally, as our numerical variables are averages of integers (or whole numbers), a lot of the values will be plotted on top of one another. Remember, from Week 1, that this is referred to as **over-plotting**, and can be alleviated by slightly nudging (**jittering**) the points in a random direction. For example, let's look at the three points in the top-right of the scatterplot that have a beauty score slightly less than 8. Are there really only three values plotted there, or are there more that we cannot see due to over-plotting? Let's find out by adding some jitter to the plot: 

```{r correlation5, echo = FALSE, eval = TRUE, warning = FALSE, fig.width = 8, fig.align = "center", fig.cap = "Figure 3: Comparing regular and jittered scatterplots."}
box <- data_frame(x=c(7.6, 8, 8, 7.6, 7.6), y=c(4.75, 4.75, 5.1, 5.1, 4.75))
p1 <- ggplot(evals.scores, aes(x = bty_avg, y = score)) +
  geom_point() +
  labs(x = "Beauty Score", y = "Teaching Score",
       title = "Regular scatterplot") +
  geom_path(data = box, aes(x=x, y=y), col = "red", size = 1)
set.seed(76)
p2 <- ggplot(evals.scores, aes(x = bty_avg, y = score)) +
  geom_jitter() +
  labs(x = "Beauty Score", y = "Teaching Score",
       title = "Jittered scatterplot") +
  geom_path(data = box, aes(x=x, y=y), col = "red", size = 1)
grid.arrange(p1, p2, ncol=2)
```

From the jittered scatterplot we can see that:

1. There are actually more than just three points plotted in the top-right; and
2. There are more instructors with a beauty score between 3 and 4.5 than originally appears due to over-plotting.

**Note**: jittering does not actually change the values within a data set, it is merely a tool for visualisation purposes. Hence, we shall continue on with plotting the original data.

<br>
<br>


## Formal analysis {-}

After completing an exploratory data analysis the next step is to perform a **formal analysis** on the data. This involves constructing an appropriate statistical model from the information gathered during the exploratory data analysis step. Here, we shall be fitting a simple linear regression model to the data on teaching and beauty scores, where our objective is to acquire the best fitting regression line. This is done by finding estimates of the intercept ($\alpha$) and slope ($\beta$) which give us the best-fitting line to the data. This can be done in R using the `lm` function to fit a linear model to the data as follows:

```{r lm, echo = TRUE, eval = TRUE, warning = FALSE}
model <- lm(score ~ bty_avg, data = evals.scores)
model
```

This tells us that our best-fitting line to the data is:

$$\widehat{\mbox{score}} = \widehat{\alpha} + \widehat{\beta} x_i = `r round(model$coefficients[1],3)`  + `r round(model$coefficients[2],3)` \cdot \mbox{bty_avg}$$

where

  * $\widehat{\alpha} = `r model$coefficients[1]`$ is the intercept coefficient and means that, for any instructor with a `bty_avg = 0`, their average teaching `score` would be 3.8803. Note that `bty_avg = 0` is not actually possible as  `bty_avg` is an average of beauty scores ranging between 1 and 10.
  * $\widehat{\beta} = `r model$coefficients[2]`$ is the slope coefficient associated with the exploratory variable `bty_avg`, and summarises the relationship between `score` and `bty_avg`. That is, as `bty_avg` increases, so does `score`, such that
    * For every 1 unit increase in `bty_avg`, there is an associated increase of, on average, `r round(model$coefficients[2],3)` units of `score`.

Finally, we can superimpose our best-fitting line onto our scatterplot to see how it fits through the points using the `geom_smooth` function as follows:

```{r lm2, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 4: Relationship between teaching and beauty scores with regression line superimposed."}
ggplot(evals.scores, aes(x = bty_avg, y = score)) +
  geom_point() +
  labs(x = "Beauty Score", y = "Teaching Score", 
       title = "Relationship of teaching and beauty scores") +
  geom_smooth(method = "lm", se = FALSE)
```

Now that we have fitted our simple linear regression model to the data, how do we use it to obtain information on individual data points? This can be done by looking at the **fitted values**. For example, let's say we are interested in looking at the 21st instructor who has the following teaching and beauty scores:

| `score`| `bty_avg`|
|-----:|-------:|
|   4.9|   7.33|

What would the `score` be on our best-fitting line for this instructor with a `bty_avg` of 7.33? We simply plug the instructor's `bty_avg` into our regression model:

$$\widehat{\mbox{score}} = 3.88034 + 0.06664 \cdot \mbox{bty_avg} = 3.88034 + 0.06664 \cdot 7.33 = 4.369,$$
The regression model gives our instructor a `score` of 4.369. However, we know the `score` of the instructor is 4.9 meaning that our model was out by 0.531. This is known as the **residual** ($\epsilon$) and can be thought of as the error or *lack of fit* of the regression line. In this case, the residual is given by:

$$ \widehat{\epsilon} = y - \widehat{y} = 4.9 - 4.369 = 0.531.$$
This is essentially the distance between the fitted regression line and the observed (true) value. This can be seen on the following scatterplot:

```{r lm3, echo = FALSE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 5: Example of observed value, fitted value, and residual."}
index <- which(evals.scores$bty_avg == 7.333 & evals.scores$score == 4.9)
target_point <- model %>%
  get_regression_points() %>%
  slice(index)
x <- target_point$bty_avg
y <- target_point$score
y_hat <- target_point$score_hat
resid <- target_point$residual

ggplot(evals.scores, aes(x = bty_avg, y = score)) +
  geom_point() +
  labs(x = "Beauty Score", y = "Teaching Score", 
       title = "Relationship of teaching and beauty scores") + 
  geom_smooth(method = "lm", se = FALSE) +
  annotate("point", x = x, y = y, col = "red", size = 3) +
  annotate("point", x = x, y = y_hat, col = "red", shape = 15, size = 3) +
  annotate("segment", x = x, xend = x, y = y, yend = y_hat, color = "blue",
           arrow = arrow(type = "closed", length = unit(0.02, "npc")))
```

where

  * the red circle is the observed (true) `score` ($y=4.9$) of the instructor;
  * the red square is the fitted value ($\widehat{y} = 4.369$) from the regression line; and
  * the blue arrow is the distance between the observed and fitted values, that is, the residual.

<br>

**Task**: Obtain the observed `score` and `bty_avg` for the 27th instructor.

`r hide("Hint")`
Pick out the 27th row of the `evals.scores` data set.
`r unhide()`

```{r Task4-solution, webex.hide="Solution", echo=TRUE, eval=TRUE}
evals.scores[27, ]
```

<br>

```{r MCQ6}
opts_Q6 <- sample(c("4.6",
                    answer = "4.1",
                    "3.2",
                    "3.9"))
```

**Using the regression model, find the fitted value of `score` for the 13th instructor?**
`r longmcq(opts_Q6)`

<br>

```{r MCQ7}
opts_Q7 <- sample(c("0.41",
                    answer = "0.35",
                    "0.28",
                    "0.31"))
```

**Using the regression model, find the value of the `residual` error for the 56th instructor?**
`r longmcq(opts_Q7)`

<br>

To obtain the fitted values and residuals for all instructors within the data set we can use the `get_regression_points` function:

```{r lm4, echo = TRUE, eval = TRUE, warning = FALSE}
regression.points <- get_regression_points(model)
regression.points
```

The table provides us with information on the:

  * `score`: the observed value of the outcome variable $y$;
  * `bty_avg`: the values of the explanatory variable $x$;
  * `score_hat`: the values of the fitted values $\widehat{y}$; and
  * `residual`: the residuals $y - \widehat{y}$.
  
```{r MCQ8}
opts_Q8 <- sample(c("4.3",
                    answer = "4.2",
                    "3.9",
                    "3.7"))
```

<br>

**Using the table above, find the fitted value of `score` for the 72nd instructor?**
`r longmcq(opts_Q8)`

<br>

```{r MCQ9}
opts_Q9 <- sample(c("0.66",
                    answer = "0.61",
                    "0.59",
                    "0.55"))
```

**Using the table above, find the value of the `residual` error for the 44th instructor?**
`r longmcq(opts_Q9)`

<br>

## Assessing model fit {-}

When we fit a simple linear regression model there are five main assumptions that we need to hold true in order for the model to be an appropriate fit to the data. These assumptions are:

1. The deterministic part of the model captures all the non-random structure in the data, i.e.\ the residuals have mean zero.
2. The scale of the variability of the residuals is constant at all values of the explanatory variables.
3. The residuals are normally distributed.
4. The residuals are independent.
5. The values of the explanatory variables are recorded without error.

One way we can check our first assumption is to plot the residuals (`residuals`) against the explanatory variable (`bty_avg`). From this we should be able to check that the explanatory variable has a linear relationship with the outcome variable (`score`). We can plot the residuals against our explanatory variable using:

```{r lm6, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 6: Residuals against beauty score."}
ggplot(regression.points, aes(x = bty_avg, y = residual)) +
  geom_point() +
  labs(x = "Beauty Score", y = "Residual") +
  geom_hline(yintercept = 0, col = "blue", size = 1)
```

Ideally, for the first assumption to hold we should observe the following:

  * There should be no systematic pattern, i.e.\ the residuals should appear randomly scattered.
  * The residuals should have mean zero. That is, they should be evenly scattered above and below the zero line. This is because the regression model will overestimate some of the fitted values, but it will also underestimate some, and hence, on average, they should even out to have mean zero.

```{r MCQ10}
opts_Q10 <- c(answer = "Yes",
              "No")
```

<br>

**Does the first assumption appear to hold from the scatterplot of the residuals against the explanatory variable?**
`r longmcq(opts_Q10)`

<br>

We can examine our first two assumptions by also plotting the residuals against the fitted values as follows:

```{r lm7, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 7: Residuals against fitted values."}
ggplot(regression.points, aes(x = score_hat, y = residual)) +
  geom_point() +
  labs(x = "Fitted values", y = "Residual") +
  geom_hline(yintercept = 0, col = "blue", size = 1)
```

From the plot of the residuals against the fitted values we want to examine whether:

  * The residuals have mean zero.
  * If the residuals have constant variance across all levels of the fitted values. That is, the range (or spread) of the residuals should be similar across all levels of the fitted values and display no obvious changes in variability.
  
```{r MCQ11}
opts_Q11 <- c(answer = "Yes",
              "No")
```

<br>

**Do assumptions 1. and 2. appear to hold from the plot of the residuals against the fitted values?**
`r longmcq(opts_Q11)`

<br>

**Task**: Examine the following residual plots before answering the questions below. 

```{r lm8, echo = FALSE, eval = TRUE, warning = FALSE, fig.width = 10, fig.align = "center", fig.cap = "Figure 8: Examples of different residual patterns."}
resid_ex <- evals.scores
resid_ex$ex_1 <- ((evals.scores$bty_avg - 5) ^ 2 - 6 + rnorm(nrow(evals.scores), 0, 0.5)) * 0.4
resid_ex$ex_2 <- (rnorm(nrow(evals.scores), 0, 0.075 * evals.scores$bty_avg ^ 2)) * 0.4
  
resid_ex <- resid_ex %>%
  select(bty_avg, ex_1, ex_2) %>%
  gather(type, eps, -bty_avg) %>% 
  mutate(type = ifelse(type == "ex_1", "Example 1", "Example 2"))

ggplot(resid_ex, aes(x = bty_avg, y = eps)) +
  geom_point() +
  labs(x = "x", y = "Residual") +
  geom_hline(yintercept = 0, col = "blue", size = 1) +
  facet_wrap(~type)
```

```{r MCQ12}
opts_Q12 <- c("Yes",
              answer = "No")
```

<br>

**Do the assumptions hold for Example 1?**
`r longmcq(opts_Q12)`

<br>

```{r MCQ13}
opts_Q13 <- c("Yes",
              answer = "No")
```

**Do the assumptions hold for Example 2?**
`r longmcq(opts_Q13)`

<br>

To assess our third assumption that the residuals are normally distributed we can simply plot a histogram of the residuals:

```{r lm9, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 9: Histogram of residuals."}
ggplot(regression.points, aes(x = residual)) +
  geom_histogram(binwidth = 0.25, color = "white") +
  labs(x = "Residual")
```

Ideally, for the assumption of normally distributed residuals, the histogram should be bell-shaped and centred at zero, i.e.\ the residuals have mean zero. However, in practice this will almost never be the case, and as such, like the plots of the residuals, there is some subjectivity in whether you believe the assumptions hold. For instance, here we can see that the histogram is slightly skewed to the left in that the distribution has a longer tail to the left. However, in my opinion, this is not of much concern as the histogram appears to be relatively symmetrical and bell-shaped, and as such the assumption of normally distributed random errors appears valid in this case.  

Finally, assumptions 4.\ and 5.\ are often justified on the basis of the experimental context and are not formally examined.

<br>
<br>

# Simple linear regression with one categorical explanatory variable {-}

Here, we will fit a simple linear regression model were the explanatory variable is categorical. A **categorical variable** is a variable of a fixed number of possible values, assigning units to particular groups (or categories) based on qualitative properties.

We shall examine the `gapminder` data set from the `gapminder` library. This is a data set on life expectancy across various countries around the world. We will explore life expectancy and its potential differences:

  * Between continents: Does life expectancy vary, on average, between the five continents of the world?; and
  * Within continents: Does life expectancy vary, on average, within the five continents of the world?

Thus, we will be looking at:

  * life expectancy as our numerical outcome variable $y$; and
  * the continent a country is within as our categorical variable $x$.

## Exploratory data analysis {-}

Let's examine a subset of the `gapminder` data set relating to the year 2007. That is, we use the `filter` function to choose only the observations pertaining to 2007, and then `select` the variables we are interested in:

```{r gap, echo = TRUE, eval = TRUE, warning = FALSE}
gapminder2007 <- gapminder %>%
  filter(year == 2007) %>% 
  select(country, continent, lifeExp)
```

The new data set can be examined using either the `View` or `glimpse` functions, i.e.\

```{r gap2, echo = TRUE, eval = TRUE, warning = FALSE}
glimpse(gapminder2007)
```

Here, we can see that both `country` and `continent` are factors (`fct`), which is how R stores categorical variables. Similarly to our previous exploratory data analysis, we can obtain summary statistics using the `skim` function. First, let's take a look at the life expectancy (`lifeExp`) and `continent` variables:

```{r gap3, echo = TRUE, eval = TRUE, warning = FALSE}
gapminder2007 %>% 
  select(continent, lifeExp) %>% 
  skim()
```

The summary output for the numerical outcome variable `lifeExp` is the same as we have seen previously. However, for the categorical variable `continent` we obtain:

  * `n_unique`: the number of levels (or categories) of the variable, i.e.\ the number of continents.
  * `top_counts`: the top counts from the top categories.
  * `ordered`: whether the variable is *ordinal* or not. That is, whether or not the ordering of the categories matter.
  
```{r MCQ14}
opts_Q14 <- sample(c("30",
                     answer = "33",
                     "25",
                     "52"))
```

<br>

**From the `gapminder` data set, how many countries comprise Asia?**
`r longmcq(opts_Q14)`

<br>

```{r MCQ15}
opts_Q15 <- sample(c("Oceania",
                     answer = "Europe",
                     "Asia",
                     "Africa",
                     "Americas"))
```

**Which continent has the third lowest number of countries in the `gapminder` data set?**
`r longmcq(opts_Q15)`

<br>

```{r MCQ16}
opts_Q16 <- c("Yes",
              answer = "No")
```

**Is the `continent` variable ordinal?**
`r longmcq(opts_Q16)`

<br>

We can summarise any differences in life expectancy by continent by taking a look at the median and mean life expectancies of each continent using the `group_by` and `summarize` functions as follows:

```{r gap4, echo = c(1), eval = TRUE, warning = FALSE}
lifeExp.continent <- gapminder2007 %>%
  group_by(continent) %>%
  summarize(median = median(lifeExp), mean = mean(lifeExp))
lifeExp.continent
```

```{r MCQ17}
opts_Q17 <- sample(c("Oceania",
                     "Europe",
                     "Asia",
                     answer = "Africa",
                     "Americas"))
```

<br>

**Which continent has the lowest life expectancy?**
`r longmcq(opts_Q17)`

<br>

**Task**: Obtain the worldwide median and mean life expectancies from the `gapminder2007` data set.

`r hide("Hint")`
Use the `median` and `mean` functions within the `summarize` function.
`r unhide()`

```{r Task5-solution, webex.hide="Solution", echo=TRUE, eval=TRUE}
gapminder2007 %>%
  summarize(median = median(lifeExp), mean = mean(lifeExp))
```

<br>

```{r MCQ18}
opts_Q18 <- c("Lower",
              answer = "Higher")
```

<br>

**Is the average life expectancy of Europe higher or lower than the worldwide average?**
`r longmcq(opts_Q18)`

<br>

Boxplots are often used when examining the distribution of a numerical outcome variable across different levels of a categorical variable:

```{r gap6, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 10: Life expectancy by continent in 2007."}
ggplot(gapminder2007, aes(x = continent, y = lifeExp)) +
  geom_boxplot() +
  labs(x = "Continent", y = "Life expectancy (years)", 
       title = "Life expectancy by continent")
```

Here, we can see that the middle 50% of the life expectancy distribution of Africa is much smaller than, and does not overlap with, the middle 50% of the remaining four continents, while the country with the highest life expectancy in Africa is less than all countries in Oceania. Speaking of Oceania, there is almost no variability (or spread) in life expectancy in this continent, however that may well be because it consists of only two countries (Australia and New Zealand). There is more variability in life expectancy in the continents of Africa and Asia.

```{r MCQ19}
opts_Q19 <- sample(c("Bahrain",
                     answer = "Afghanistan",
                     "China",
                     "Iran",
                     "Cambodia",
                     "Other"))
```

<br>

**What country in Asia has a much lower life expectancy than the rest of the continent?**
`r longmcq(opts_Q19)`

`r hide("Hint")`
Start by subsetting the `gapminder2007` data set for only the `continent` of Asia using the `filter` function. The `group_by` and `summarize` functions can then be used to obtain a table of the `median` and `mean` life expectancies of all countries in Asia.
`r unhide()`

<br>

## Formal analysis {-}

When examining the relationship between a numerical outcome variable $y$ and a categorical explanatory variable $x$, we are not just looking to find the best-fitting line to the data as before, but are examining relative differences to a baseline category.  For example, the table below displays the mean life expectancy of each continent, as well as the differences between the means of each continent and Africa. Now, in comparison with Africa we can see that the mean life expectancy of the other continents is around 18-26 years greater than that of Africa.

```{r gap7, echo = FALSE, eval = TRUE, warning = FALSE}
lifeExp.by.continent <- gapminder2007 %>%
  group_by(continent) %>%
  summarize(median = median(lifeExp), mean = mean(lifeExp))

mean.africa <- lifeExp.by.continent %>%
  filter(continent == "Africa") %>%
  pull(mean)
```
```{r gap8, echo = FALSE, eval = TRUE, warning = FALSE}
gapminder2007 %>%
  group_by(continent) %>%
  summarize(mean = mean(lifeExp)) %>%
  mutate(`mean vs Africa` = mean - mean.africa) %>% 
  knitr::kable(
    digits = 2,
    booktabs = TRUE
  )
```

Now let us fit our regression model to the data, where `lifeExp` is our outcome variable $y$ and `continent` is our categorical explanatory variable $x$:

```{r gap9, echo = TRUE, eval = TRUE, warning = FALSE}
lifeExp.model <- lm(lifeExp ~ continent, data = gapminder2007)
```
```{r gap10, echo = FALSE, eval = TRUE, warning = FALSE}
get_regression_table(lifeExp.model)
```

**Note**: For now we will ignore the last five columns of the regression table and only focus on the estimate column.

We obtain five estimates: the `intercept` term and four others relating to the continents (`continentAmericas`, `continentAsia`, `continentEurope` and `continentOceania`), such that our regression equation is given as:

$$\widehat{\mbox{life exp}} = \widehat{\alpha} + \widehat{\beta}_{\mbox{Amer}} \cdot \mathbb{I}_{\mbox{Amer}}(x) + \widehat{\beta}_{\mbox{Asia}} \cdot \mathbb{I}_{\mbox{Asia}}(x) + \widehat{\beta}_{\mbox{Euro}} \cdot \mathbb{I}_{\mbox{Euro}}(x) + \widehat{\beta}_{\mbox{Ocean}} \cdot \mathbb{I}_{\mbox{Ocean}}(x),$$
where

  * the intercept $\widehat{\alpha}$ is the mean life expectancy for our baseline category Africa;
  * $\widehat{\beta}_{\mbox{continent}}$ is the difference in the mean life expectancy of a given continent relative to the baseline category Africa; and
  * $\mathbb{I}_{\mbox{continent}}(x)$ is an indicator function such that
  
    $$\mathbb{I}_{\mbox{continent}}(x)=\left\{
                \begin{array}{ll}
                  1 ~~~ \mbox{if country} ~ x ~ \mbox{is in the continent},\\
                  0 ~~~ \mbox{Otherwise}.\\
                \end{array}
              \right.$$

Essentially, the estimates for each continent are known as *offsets* relative to the baseline category (Africa in this case). For example, the mean life expectancy for Africa is simply equal to the intercept term $\widehat{\alpha} = 54.8$. However, the mean life expectancy for Asia is $\widehat{\alpha} + \widehat{\beta}_{\mbox{Asia}} \cdot \mathbb{I}_{\mbox{Asia}}(x) = 54.8 + 15.9 \cdot 1 = 70.7$.

```{r MCQ20}
opts_Q20 <- sample(c("77.6",
                     answer = "73.6",
                     "80.7"))
```

<br>

**From the regression model, what is the mean life expectancy of the Americas?**
`r longmcq(opts_Q20)`

<br>

## Assessing model fit {-}

What do the fitted values $\widehat{y}$ and the residuals $y - \widehat{y}$ correspond to when we are dealing with a categorical explanatory variable? Let's explore the `gapminder2007` data set in order to understand how they work.

```{r gap12, echo = FALSE, eval = TRUE, warning = FALSE}
gapminder2007
```

Here, we see the life expectancy of each country and the continent they are from. For example, let's remember the life expectancies of Afghanistan (43.8) and Bahrain (75.6). Now, we can obtain the fitted values and residuals in the same way we did previously:

```{r gap13, echo = c(1), eval = TRUE, warning = FALSE}
regression_points <- get_regression_points(lifeExp.model)
regression_points
```

The first row of the regression table corresponds to the observed life expectancy (`lifeExp`), fitted value (`lifeExp_hat`) and the residual error (`residual`) for Afghanistan. Here, we see that the fitted value (`lifeExp_hat = 70.7`) is much greater than the life expectancy of Afghanistan (`lifeExp = 43.8`) with a `residual = -26.9`. Now, for Bahrain (`ID = 8`) we also have the same fitted value (`lifeExp_hat = 70.7`). This is because the fitted values for each `country` correspond to the mean life expectancy for that `continent`. Hence, all countries in Africa have the fitted value`lifeExp_hat = 54.8`, while all countries in Europe have the fitted value `lifeExp_hat = 77.6`. The `residual` error in this case is then how much a country deviates from the mean life expectancy of its respective continent.

```{r MCQ21}
opts_Q21 <- sample(c("Saudi Arabia",
                    answer = "Reunion",
                    "Belgium",
                    "Other",
                    "Argentina"))
```

<br>

**Which country has the largest positive `residual` error?**
`r longmcq(opts_Q21)`

`r hide("Hint")`
This can be found by looking through the regression table above. You could also try using the `which.max` function on the `residual` column.
`r unhide()`

<br>

For assessing the assumptions surrounding the residuals for a categorical explanatory variable, we can plot the residuals for each continent:

```{r gap14, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 11: Residuals over continent."}
ggplot(regression_points, aes(x = continent, y = residual)) +
  geom_jitter(width = 0.1) + 
  labs(x = "Continent", y = "Residual") +
  geom_hline(yintercept = 0, col = "blue")
```

**Note**: we have jittered the points for each continent in order to see the residuals for each country more clearly.

Here, we see that there is an even spread of the residuals above and below the zero line for each continent, and hence our assumption that the residuals have mean zero appears valid. There is an outlier observed for Asia with a large negative residual (relating to Afghanistan).

To check that the residual errors are normally distributed, we plot a histogram of them:

```{r gap15, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 12: Histogram of residuals."}
ggplot(regression_points, aes(x = residual)) +
  geom_histogram(binwidth = 5, color = "white") +
  labs(x = "Residual")
```

```{r MCQ22}
opts_Q22 <- c(answer = "Yes",
              "No")
```

<br>

**Are the residuals normally distributed with mean zero?**
`r longmcq(opts_Q22)`

<br>
<br>


# Further Tasks: Simple Linear Regression {-}

```{r MCQ23}
opts_Q23 <- c("$x$",
              answer = "$y$")
```

**How do we commonly represent an outcome variable?**
`r longmcq(opts_Q23)`

<br>

```{r MCQ24}
opts_Q24 <- sample(c("Covariate",
                     answer = "Response",
                     "Predictor",
                     "Independent"))
```

**What is another name for the outcome varable?**
`r longmcq(opts_Q24)`

<br>

```{r MCQ25}
opts_Q25 <- sample(c("$y$",
                     answer = "$\\beta$",
                     "$\\alpha$",
                     "$\\epsilon$"))
```

**For the linear regression model $y_i = \alpha + \beta x_i + \epsilon_i, ~ \epsilon_i \sim N(0, \sigma^2)$, what term refers to the slope of the regression line?**
`r longmcq(opts_Q25)`

<br>

```{r MCQ26}
opts_Q26 <- sample(c("Very strong positive correlation",
                     answer = "Strong positive correlation",
                     "Strong negative correlation",
                     "Moderate negative correlation",
                     "Weak positive correlation"))
```

**What would be the verbal interpretation of a correlation coefficient of 0.73?**
`r longmcq(opts_Q26)`

<br>

```{r MCQ27}
opts_Q27 <- sample(c("Fitted value",
                     answer = "Residual error",
                     "Observed value"))
```

**What does $y - \widehat{y}$ refer to?**
`r longmcq(opts_Q27)`

<br>

```{r MCQ28}
opts_Q28 <- sample(c("Numerical",
                     answer = "Categorical"))
```

**A `factor` in R is what type of variable?**
`r longmcq(opts_Q28)`

<br>

**Task** Examine the relationship between teaching score and age in the `evals` data set. What is the value of the correlation coefficient? How would you interpret this verbally? Finally, produce a scatterplot of teaching score and age. 

`r hide("Hint")`
Start by looking at a subset of the `evals` data set referring to `score` and `age`. You can then use the `get_correlation` function to obtain the correlation coefficient. The scatterplot can be produced using `ggplot` and `geom_point`. Note, remember to give your scatterplot appropriate labels.
`r unhide()`

<br>

**Task** Perform a formal analysis of the relationship between teaching score and age by fitting a simple linear regression model. Superimpose your best-fitting line onto your scatterplot from Task 2.

`r hide("Hint")`
Use the `lm` function to fit the regression model. Check the `geom_smooth` function to add the best-fitting line to your scatterplot.
`r unhide()`

<br>

```{r MCQ29}
opts_Q29 <- sample(c("4.6",
                     answer = "4.3",
                     "4.1",
                     "5.3"))
```

**What is the fitted value of the 22nd instructor?**
`r longmcq(opts_Q29)`

<br>

```{r MCQ30}
opts_Q30 <- sample(c("4.27",
                     answer = "-0.07",
                     "4.2",
                     "0.1",
                     "-0.15"))
```

**What is the residual error for the 34th instructor?**
`r longmcq(opts_Q30)`

<br>

**Task** Assess the model assumptions from Task 3 by plotting the residuals against the explanatory variable and fitted values, respectively. Also, plot a histogram of the residuals to assess whether they are normally distributed.

`r hide("Hint")`
You will want to store the fitted values and residuals from your model using the `get_regression_points` function. The plots examining the assumptions can then be plotted using `ggplot`, `geom_point` and `geom_histogram`.
`r unhide()`

<br>

```{r MCQ31}
opts_Q31 <- c(answer = "Yes",
              "No")
```

**Do the model assumptions hold?**
`r longmcq(opts_Q31)`

<br>

**Task** If we were interested in exploring the relationship between teaching score and age for male and female professors separately we could produce a scatterplot of teaching score and age with different symbols (and an appropriate legend) for males and females.  Create this plot and superimpose on it the linear regression models fitted to the male and female data separately.  Note you do not need to examine the models formally, we'll look at that in a future lab.

`r hide("Hint")`
The `aes` function in `ggplot2` can take arguments such as`shape=...`, `color=...` and `linetype=...` to define the appearance of plotted objects.
`r unhide()`

<br>

**Task** Perform the same analysis we did on life expectancy from the `gapminder` data set in 2007. However, subset the data for the year 1997. Are there any differences in the results across this 10 year period?

`r hide("Hint")`
Start by subsetting the `gapminder` data set for the year 1997 using the `filter` function.
`r unhide()`

<br>
<br>



# Multiple Linear Regression {-}

We have already introduced regression modelling where we modeled the relationship between an outcome variable $y$ and a single explanatory variable $x$. We only included one explanatory variable $x$, which was either a continuous or a categorical variable. Now, we shall examine fitting regression models with more than one explanatory variable. This is known as **multiple regression**.

When fitting regression models with multiple explanatory variables, the interpretation of an explanatory variable is made in association with the other variables. For example,  if we wanted to model income then we may consider an individual's level of education, and perhaps the wealth of their parents. Then, when interpreting the effect an individuals level of education has on their income, we would also be considering the effect of the wealth of their parents simultaneously, as these two variables are likely to be related.

Create a `.Rmd` file to load the following packages into R:

```{r librariesMLR, echo = TRUE, eval = TRUE, warning = FALSE, message = FALSE}
library(ggplot2)
library(dplyr)
library(moderndive)
library(ISLR)
library(skimr)
library(plotly)
library(tidyr)
library(jtools)
```

***

Additional information and examples can be found in [Chapter 6](https://moderndive.com/6-multiple-regression.html) of [Statistical Inference via Data Science](https://moderndive.com/index.html).

<br>
<br>


# Regression modelling with two continuous explanatory variables {-}

Let's start by fitting a regression model with two continuous explanatory variables. We shall examine a data set within the `ISLR` package, which is an accompanying R package related to the textbook [An Introduction to Statistical Learning with Applications in R](http://www-bcf.usc.edu/~gareth/ISL/). We will take a look at the `Credit` data set, which consists of predictions made on the credit card balance of 400 individuals, where the predictions are based on information relating to income, credit limit and the level of education of an individual.

**Note**: This is a simulated data set and is not based on credit card balances of actual individuals.

The regression model we will be considering contains the following variables:

  * the continuous outcome variable $y$, the credit card balance of an individual; and
  * two explanatory variables $x_1$ and $x_2$, which are an individual's credit limit and income (both in thousands of dollars), respectively.


## Exploratory data analysis {-}

**Task**: Start by subsetting the `Credit` data set so that we only have the variables we are interested in, that is, `Balance`, `Limit` and `Income`. Note, it is best to give your new data set a different name than Credit as to not overwrite the original `Credit` data set.

```{r Task6-solution, webex.hide="Solution", echo=TRUE, eval=TRUE}
Cred <- Credit %>%
  select(Balance, Limit, Income)
```

<br>

Your new data set should look like the one below.

```{r subset2, echo = FALSE, eval = TRUE, warning = FALSE}
head(Cred)
```

We can also use the `glimpse` function to take a look at our new data set (named `Cred` in this case):

```{r glimpse, echo = TRUE, eval = TRUE, warning = FALSE}
glimpse(Cred)
```

**Note**: the `View` function can also be used within RStudio to examine a spreadsheet of the data.

Now, let's take a look at summary statistics relating to our data set using the `skim` function:

```{r skim, echo = TRUE, eval = TRUE, warning = FALSE}
Cred %>%
  skim()
```

<br>

```{r MCQ32}
opts_Q32 <- sample(c("$4622.50",
                     answer = "$4735.60",
                     "$2308.20",
                     "$5872.75"))
```

**What is the mean credit limit?**
`r longmcq(opts_Q32)`

<br>

```{r MCQ33}
opts_Q33 <- sample(c("$520.01",
                     answer = "$459.50",
                     "$459.76",
                     "$863.00"))
```

**What is the median credit balance?**
`r longmcq(opts_Q33)`

<br>

```{r MCQ34}
opts_Q34 <- c(answer = "25%",
              "50%",
              "75%",
              "100%")
```

**What percentage of credit card holders have an income greater than $57,470?**
`r longmcq(opts_Q34)`

<br>

Now that we are looking at the relationship between an outcome variable and multiple explanatory variables, we need to examine the correlation between each of them. We can examine the correlation between `Balance`, `Limit` and `Income` by creating a table of correlations as follows:

```{r cor, echo = TRUE, eval = TRUE, warning = FALSE}
Cred %>%
  cor()
```

<br>

```{r MCQ35}
opts_Q35 <- sample(c("1.000",
                     answer = "0.862",
                     "0.792",
                     "0.464"))
```

**What is the correlation coefficient for the linear relationship between `Balance` and `Limit`?**
`r longmcq(opts_Q35)`

<br>

```{r MCQ36}
opts_Q36 <- sample(c("Strongly positive",
                     answer = "Weakly positive",
                     "Moderately positive",
                     "Weakly negative"))
```

**What would be the verbal interpretation of the correlation coefficient for the linear relationship between `Balance` and `Income`?**
`r longmcq(opts_Q36)`

<br>

**Question**: Why are the diagonal components of our correlation table all equal to 1?

From our correlation table we can see that the correlation between our two explanatory variables is 0.792, which is a strong positive linear relationship. Hence, we say there is a high degree of *collinearity* between our explanatory variables.

**Collinearity** (or **multicollinearity**) occurs when an explanatory variable within a multiple regression model can be linearly predicted from the other explanatory variables with a high level of accuracy. For example, in this case, since `Limit` and `Income` are highly correlated, we could take a good guess as to an individual's `Income` based on their `Limit`. That is, having one or more highly correlated explanatory variables within a multiple regression model essentially provides us with redundant information. Normally, we would remove one of the highly correlated explanatory variables, however, for the purpose of this example we shall ignore the potential issue of collinearity and carry on. You may want to use the `pairs` function or the `ggpairs` function from the `GGally` package to look at potential relationships between all of the variables within a data set.

Let's now produce scatterplots of the relationship between the outcome variable and the explanatory variables. First, we shall look at the scatterplot of `Balance` against `Limit`:

```{r scat1, echo = TRUE, eval = TRUE, warning = FALSE, message=FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 1: Relationship between balance and credit limit."}
ggplot(Cred, aes(x = Limit, y = Balance)) +
  geom_point() +
  labs(x = "Credit limit (in $)", y = "Credit card balance (in $)", 
       title = "Relationship between balance and credit limit") +
  geom_smooth(method = "lm", se = FALSE)
```

<br>

```{r MCQ37}
opts_Q37 <- sample(c("Negative",
                     answer = "Positive",
                     "None"))
```

**What is the relationship between balance and credit limit?**
`r longmcq(opts_Q37)`

<br>

Now, let's look at a scatterplot of `Balance` and `Income`: 

```{r scat2, echo = TRUE, eval = TRUE, warning = FALSE, message=FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 2: Relationship between balance and income."}
ggplot(Cred, aes(x = Income, y = Balance)) +
  geom_point() +
  labs(x = "Income (in $1000)", y = "Credit card balance (in $)", 
       title = "Relationship between balance and income") +
  geom_smooth(method = "lm", se = FALSE)
```

<br>

```{r MCQ38}
opts_Q38 <- sample(c("Negative",
                     answer = "Positive",
                     "None"))
```

**What is the relationship between balance and income?**
`r longmcq(opts_Q38)`

<br>

The two scatterplots above focus on the relationship between the outcome variable `Balance` and each of the explanatory variables independently. In order to get an idea of the relationship between all three variables we can use the `plot_ly` function within the `plotly` library to plot a 3-dimensional scatterplot as follows (you may need to hover over/click on the area below for the plot to appear):

```{r scat3d, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '100%', fig.align = "center", fig.cap = "Figure 3: 3D scatterplot of balance, credit limit, and income."}
plot_ly(Cred, x = ~Income, y = ~Limit, z = ~Balance,
        type = "scatter3d", mode = "markers")
```

Click on and drag Figure 3 to change the viewing perspective. Is it reasonable to think about the points being randomly scattered around a two dimensional *plane*?

In Week 3, when we fitted a regression model with one continuous explanatory variable, we were looking at the *best-fitting line*. However, now that we have more than one explanatory variable, we are looking at the *best-fitting plane*, which is a 3-dimensional generalisation of the best-fitting line.  

## Formal analysis {-}

The multiple regression model we will be fitting to the credit balance data is given as:

$$y_i = \alpha + \beta_1 x_{1i} + \beta_2 x_{2i} + \epsilon_i, ~~~~ \epsilon \sim N(0, \sigma^2),$$

where

  * $y_i$ is the credit balance of the $i^{th}$ individual;
  * $\alpha$ is the intercept and positions the best-fitting plane in 3D space;
  * $\beta_1$ is the coefficient for the first explanatory variable $x_1$;
  * $\beta_2$ is the coefficient for the second explanatory variable $x_2$; and
  * $\epsilon_i$ is the $i^{th}$ random error component.

Similarly to Week 3, we use the `lm` function to fit the regression model and the `get_regression_table` function to view our parameter estimates:

```{r mod, echo = TRUE, eval = TRUE, warning = FALSE}
Balance.model <- lm(Balance ~ Limit + Income, data = Cred)
get_regression_table(Balance.model)
```

**Notes**

* To include multiple explanatory variables within a regression model we simply use the `+` sign, that is `Balance ~ Limit + Income`.

* An alternative to `get_regression_table` is the `summ` function in the `jtools` [package](https://cran.r-project.org/web/packages/jtools/vignettes/summ.html) which allows a lot more control over what is included in the summary table.  Here is the default output... 

```{r mod2, echo = TRUE, eval = TRUE, warning = FALSE}
summ(par.model)
```

How do we interpret our model estimates defining the regression plane? They can be interpreted as follows:

  * The **intercept** represents the credit card balance (`Balance`) of an individual who has \$0 for both credit limit (`Limit`) and income (`Income`). However, this interpretation, though technically correct, is nonsensical in this context as there are no credit cards with \$0 credit limit and no people with an income of \$0 in the data set.  In contexts where the intercept term does not have a meaningful interpretation, we think of it as a value that positions the fitted model with no intuitive meaning.
  * The coefficient for credit limit (`Limit`) tells us that, *taking all other variables in the model into account and holding them constant*, there is an associated **increase**, on average, in credit card balance of \$0.26 for every \$1 increase in credit limit.
  * Similarly, the coefficient for income (`Income`) tells us that, *taking all other variables in the model into account and holding them constant*, there is an associated **decrease**, on average, in credit card balance of \$7.66 for every \$1 increase in income.

What do you notice that is strange about our coefficient estimates given our exploratory data analysis? 

Well, from our scatterplots of credit card balance against both credit limit and income, we saw that there appeared to be a positive linear relationship. Why do we then get a negative coefficient for income (-7.66)? This is due to a phenomenon known as **Simpson's Paradox**. This occurs when there are trends within different categories (or groups) of data, but that these trends disappear when the categories are grouped as a whole. For more details see [Section 7.3.2 of An Introduction to Statistical and Data Sciences in R](https://moderndive.com/7-multiple-regression.html#simpsonsparadox).


## Assessing model fit {-}

Now we need to assess our model assumptions. As a reminder, our model assumptions are:

1. The deterministic part of the model captures all the non-random structure in the data, i.e.\ the residuals have mean zero.
2. The scale of the variability of the residuals is constant at all values of the explanatory variables.
3. The residuals are normally distributed.
4. The residuals are independent.
5. The values of the explanatory variables are recorded without error.

First, we need to obtain the fitted values and residuals from our regression model:

```{r assess, echo = c(1), eval = TRUE, warning = FALSE}
regression.points <- get_regression_points(Balance.model)
regression.points
```

Recall that `get_regression_points` provides us with values of the:

  * outcome variable $y$ (`Balance`);
  * explanatory variables $x_1$ (`Limit`) and $x_2$ (`Income`);
  * fitted values $\widehat{y}$; and
  * the residual error ($y - \widehat{y}$).
  
We can assess our first two model assumptions by producing scatterplots of our residuals against each of our explanatory variables. First, let's begin with the scatterplot of the residuals against credit limit:

```{r residplots1, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 4: Residuals vs credit limit."}
ggplot(regression.points, aes(x = Limit, y = residual)) +
  geom_point() +
  labs(x = "Credit limit (in $)", y = "Residual", title = "Residuals vs credit limit")  +
  geom_hline(yintercept = 0, col = "blue", size = 1)
```  

<br>

```{r MCQ39}
opts_Q39 <- c("Yes",
              answer = "No")
```

**Do the first two model assumptions appear to hold from the scatterplot of the residuals against credit limit?**
`r longmcq(opts_Q39)`

<br>

Now, let's plot a scatterplot of the residuals against income:

```{r residplots2, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 5: Residuals vs income."}
ggplot(regression.points, aes(x = Income, y = residual)) +
  geom_point() +
  labs(x = "Income (in $1000)", y = "Residual", title = "Residuals vs income") +
  geom_hline(yintercept = 0, col = "blue", size = 1)
```

<br>

```{r MCQ40}
opts_Q40 <- c("Yes",
              answer = "No")
```

**Do the first two model assumptions appear to hold from the scatterplot of the residuals against income?**
`r longmcq(opts_Q40)`

<br>

Finally, we can check if the residuals are normally distributed by producing a histogram:

```{r residhist, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 6: Histogram of the residuals."}
ggplot(regression.points, aes(x = residual)) +
  geom_histogram(color = "white") +
  labs(x = "Residual")
```

<br>

```{r MCQ41}
opts_Q41 <- c("Yes",
              answer = "No")
```

**Do the residuals appear to be normally distributed and centred at zero?**
`r longmcq(opts_Q41)`

<br>
<br>


# Regression modelling with one continuous and one categorical explanatory variable {-}

Let's expand upon Further Tasks 2, 3 and 4 from before by revisiting the instructor evaluation data set `evals`. You were tasked with examining the relationship between teaching score (`score`) and age (`age`). Now, let's also introduce the additional (binary) categorical explanatory variable gender (`gender`). That is, we will be examining:

  * the teaching score (`score`) as our outcome variable $y$;
  * age (`age`) as our continuous explanatory variable $x_1$; and
  * gender (`gender`) as our categorical explanatory variable $x_2$.
  
## Exploratory data analysis {-}

**Task**: Start by subsetting the `evals` data set so that we only have the variables we are interested in, that is, `score`, `age` and `gender`. Note, it is best to give your new data set a different name than evals as to not overwrite the original `evals` data set.

```{r Task7-solution, webex.hide="Solution", echo=TRUE, eval=TRUE}
eval.score <- evals %>% 
  select(score, age, gender)
```

<br>

Your new data set should look like the one below.

```{r subevals2, echo = FALSE, eval = TRUE, warning = FALSE}
eval.score
```

**Note**: You can also view your data set using the `glimpse` function, or by opening a spreadsheet view in RStudio using the `View` function.

We can use the `skim` function to obtain some summary statistics from our data:

```{r evalssum, echo = TRUE, eval = TRUE, warning = FALSE}
eval.score %>%
  skim()
```

<br>

```{r MCQ42}
opts_Q42 <- sample(c("195",
                     answer = "268",
                     "463"))
```

**How many males are in the data set?**
`r longmcq(opts_Q42)`

<br>

```{r MCQ43}
opts_Q43 <- sample(c("48.37",
                     answer = "48.00",
                     "57.00"))
```

**What is the median age in the data set?**
`r longmcq(opts_Q43)`

<br>

```{r MCQ44}
opts_Q44 <- sample(c("4.3",
                     answer = "3.8",
                     "2.3"))
```

**What is the maximum teaching score of the bottom 25% of professors?**
`r longmcq(opts_Q44)`

<br>

Now, let's compute the correlation coefficient between our outcome variable `score` and our continuous explanatory variable `age`:

```{r co2, echo = TRUE, eval = TRUE, warning = FALSE}
eval.score %>% 
  get_correlation(formula = score ~ age)
```

**Note**: The correlation coefficient only exists between continuous variables, which is why we do not include our categorical variable `gender`.

<br>

```{r MCQ45}
opts_Q45 <- sample(c("Very weak positive",
                     answer = "Very weak negative",
                     "Weak negative",
                     "Moderate positive"))
```

**What is the verbal interpretation of the correlation coefficient?**
`r longmcq(opts_Q45)`

<br>

We can now visualise our data by producing a scatterplot, where seeing as we have the categorical variable `gender`, we shall plot the points using different colours for each gender:

```{r evalsscat, echo = TRUE, eval = TRUE, warning = FALSE, message=FALSE, out.width = '90%', fig.align = "center", fig.cap = "\\label{fig:evalsscat} Figure 7: Instructor evaluation scores by age and gender. The points have been jittered."}
ggplot(eval.score, aes(x = age, y = score, color = gender)) +
  geom_jitter() +
  labs(x = "Age", y = "Teaching Score", color = "Gender") +
  geom_smooth(method = "lm", se = FALSE)
```

**Note**: The above code has jittered the points, however, this is not necessary and `geom_point` would suffice. To plot separate points by gender we simply add the `color` argument to the `aes` function and pass to it `gender`.

From the scatterplot we can see that:

  * There are very few women over the age of 60 in our data set.
  * From the plotted regression lines we can see that the lines have different slopes for men and women. That is, the associated effect of increasing age appears to be more severe for women than it does for men, i.e.\ the teaching score of women drops faster with age.
  
  
## Multiple regression: parallel slopes model {-}

Here, we shall begin by fitting what is referred to as a parallel regression lines model. This model implies that the slope of relationship between teaching score (`score`) and age (`age`) is the same for both males and females, with only the intercept of the regression lines changing. Hence, our parallel regression lines model is given as:

\begin{align}
y_{i} &= \alpha + \beta_1 x_{1i} + \beta_2  x_{2i} + \epsilon_i \nonumber \\
&= \alpha + \beta_{\mbox{age}} \cdot \mbox{age}_i + \beta_{\mbox{male}} \cdot \mathbb{I}_{\mbox{male}}(i) + \epsilon_i, \nonumber
\end{align}

where

  * $\alpha$ is the intercept of the regression line for females;
  * $\beta_{\mbox{age}}$ is the slope of the regression line for both males and females;
  * $\mbox{age}_i$ is the age of the $i$th observation
  * $\beta_{\mbox{male}}$ is the additional term added to $\alpha$ to get the intercept of the regression line for males; and
  * $\mathbb{I}_{\mbox{male}}(i)$ is an indicator function such that
  
    $$\mathbb{I}_{\mbox{male}}(i)=\left\{
                \begin{array}{ll}
                  1 ~~~ \mbox{if the} ~ i \mbox{th observation is male},\\
                  0 ~~~ \mbox{Otherwise}.\\
                \end{array}
              \right.$$

We can fit the parallel regression lines model as follows:

```{r parmod, echo = TRUE, eval = TRUE, warning = FALSE}
par.model <- lm(score ~ age + gender, data = eval.score)
get_regression_table(par.model)
```

Hence, the regression line for females is given by:

$$\widehat{\mbox{score}} = 4.48 - 0.009 \cdot \mbox{age},$$

while the regression line for males is given by:

$$\widehat{\mbox{score}} = 4.48 - 0.009 \cdot \mbox{age} + 0.191 = 4.671 - 0.009 \cdot \mbox{age}.$$

<br>

```{r MCQ46}
opts_Q46 <- sample(c("4.246",
                     answer = "4.147",
                     "4.338",
                     "4.451"))
```

**From the parallel regression lines model, what would be the teaching score of a female instructor aged 37?**
`r longmcq(opts_Q46)`

<br>

```{r MCQ47}
opts_Q47 <- sample(c("4.012",
                     answer = "4.203",
                     "4.302",
                     "4.159"))
```

**From the parallel regression lines model, what would be the teaching score of a male instructor aged 52?**
`r longmcq(opts_Q47)`

<br>

Now, let's superimpose our parallel regression lines onto the scatterplot of teaching score against age:

```{r parscat, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "\\label{fig:parscat} Figure 8: Instructor evaluation scores by age and gender with parallel regression lines superimposed."}
coeff  <- par.model %>% 
          coef() %>%
          as.numeric()

slopes <- eval.score %>%
  group_by(gender) %>%
  summarise(min = min(age), max = max(age)) %>%
  mutate(intercept = coeff[1]) %>%
  mutate(intercept = ifelse(gender == "male", intercept + coeff[3], intercept)) %>%
  gather(point, age, -c(gender, intercept)) %>% #gathers columns into rows
                                                #See Data Wrangling Cheat Sheet
  mutate(y_hat = intercept + age * coeff[2])

ggplot(eval.score, aes(x = age, y = score, col = gender)) +
  geom_jitter() +
  labs(x = "Age", y = "Teaching Score", color = "Gender") +
  geom_line(data = slopes, aes(y = y_hat), size = 1)
```

**Note**: go through the code used to create `coeff` and `slopes` and make sure you understand it.

From the parallel regression lines model both males and females have the same slope, that is, the associated effect of age on teaching score is the same for both men and women. Hence, for every one year increase in age, there is an associated decrease in teaching score of 0.009. However, male instructors have a higher intercept term, that is, there is a vertical bump in the regression line for males in teaching scores. This is linked to the average difference in teaching scores that males obtain relative to females.

What is different between our previous scatterplot of teaching score against age (Figure 7) and the one we just created with our parallel lines superimposed (Figure 8)?

In the original plot we have what is referred to as an interaction effect between age and gender. Hence, gender interacts in different ways for both males and females by age, and as such we should have different intercepts **and** slopes.

## Multiple regression: interaction model {-}
 
There is an *interaction effect* if the associated effect of one variable depends on the value of another variable. For example, the effect of age here will depend on whether the instructor is male or female, that is, the effect of age on teaching scores will differ by gender. The interaction model can be written as:

\begin{align}
y_{i} &= \alpha + \beta_1 x_{1i} + \beta_2 x_{2i} + \beta_3 x_{1i} \cdot x_{2i} + \epsilon_i \nonumber \\
&= \alpha + \beta_{\mbox{age}} \cdot \mbox{age}_i + \beta_{\mbox{male}} \cdot \mathbb{I}_{\mbox{male}}(i) + \beta_{\mbox{age, male}} \cdot \mbox{age}_i \cdot \mathbb{I}_{\mbox{male}}(i) + \epsilon_i, \nonumber
\end{align}

where $\beta_{\mbox{age, male}} \cdot \mbox{age}_i \cdot \mathbb{I}_{\mbox{male}}(i)$ corresponds to the interaction term.

In order to fit an interaction term within our regression model we replace the `+` sign with the `*` sign as follows:

```{r intmod, echo = TRUE, eval = TRUE, warning = FALSE}
int.model <- lm(score ~ age * gender, data = eval.score)
get_regression_table(int.model)
```

Hence, the regression line for females is given by:

$$\widehat{\mbox{score}} = 4.88 - 0.018 \cdot \mbox{age},$$
while the regression line for males is given by:

$$\widehat{\mbox{score}} = 4.88 - 0.018 \cdot \mbox{age} - 0.446 + 0.014 \cdot \mbox{age} = 4.434 - 0.004 \cdot \mbox{age}.$$

Notice how the interaction model allows for different slopes for females and males (-0.018 and -0.004, respectively).  These fitted lines correspond to the fitted lines we first saw in Figure 7, repeated in Figure 7b but without the `jitter`ing:
 
```{r intscat, echo = TRUE, eval = TRUE, warning = FALSE, message = FALSE, out.width = '90%', fig.align = "center", fig.cap = "\\label{fig:evalsscat2} Figure 7b: Instructor evaluation scores by age and gender with interaction model fit added (same as Figure 7 but without jittering)."}
ggplot(eval.score, aes(x = age, y = score, color = gender)) +
  geom_point() +
  labs(x = "Age", y = "Teaching Score", color = "Gender") +
  geom_smooth(method = "lm", se = FALSE)
```

<br>

```{r MCQ48}
opts_Q48 <- sample(c("4.286",
                     answer = "4.214",
                     "4.227",
                     "4.311"))
```

**From the interaction model, what would be the teaching score of a female instructor aged 37?**
`r longmcq(opts_Q48)`

<br>

```{r MCQ49}
opts_Q49 <- sample(c("3.944",
                     answer = "4.226",
                     "4.298",
                     "3.877"))
```

**From the interaction model, what would be the teaching score of a male instructor aged 52?**
`r longmcq(opts_Q49)`

<br>

How do they compare with the teaching score values from the parallel regression lines model?

Here, we can see that, although the intercept for male instructors may be lower, the associated average **decrease** in teaching score with every year increase in age (0.004) is not as severe as it is for female instructors (0.018).

## Assessing model fit {-}

Now we have to assess the fit of the model by looking at plots of the residuals. We shall do this for the interaction model. First, we need to obtain the fitted values and residuals from the interaction model as follows:

```{r intresids, echo = c(1), eval = TRUE, warning = FALSE}
regression.points <- get_regression_points(int.model)
regression.points
```

Let's start by looking at a scatterplot of the residuals against the explanatory variable by gender:

```{r intresid1, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 9: Residuals vs the explanatory variable age by gender."}
ggplot(regression.points, aes(x = age, y = residual)) +
  geom_point() +
  labs(x = "age", y = "Residual") +
  geom_hline(yintercept = 0, col = "blue", size = 1) +
  facet_wrap(~ gender)
```

<br>

```{r MCQ50}
opts_Q50 <- c(answer = "Yes",
              "No")
```

**Do the assumptions of the residuals having mean zero and constant variability across all levels of the explanatory variable hold?**
`r longmcq(opts_Q50)`

`r hide("Answer")`
There is an even scatter of points above and below the zero line indicating the residuals have mean zero. The scattering of the points is also constant across all values of the explanatory variable with no systematic pattern observed in the residuals.
`r unhide()`

<br>

Now, we can plot the residuals against the fitted values:

```{r intresid2, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 10: Residuals vs the fitted values."}
ggplot(regression.points, aes(x = score_hat, y = residual)) +
  geom_point() +
  labs(x = "Fitted values", y = "Residual") +
  geom_hline(yintercept = 0, col = "blue", size = 1) +
  facet_wrap(~ gender)
```

<br>

```{r MCQ51}
opts_Q51 <- c(answer = "Yes",
              "No")
```

**Do the assumptions of the residuals having mean zero and constant variability across all levels of the fitted values hold?**
`r longmcq(opts_Q51)`

`r hide("Answer")`
There is an even scatter of points above and below the zero line indicating the residuals have mean zero. The scattering of the points is also constant across all values of the fitted values with no systematic pattern observed in the residuals. We can also see that the range of fitted values for male instructors is narrower than that of female instructors.
`r unhide()`

<br>

Finally, let's plot histograms of the residuals to assess whether they are normally distributed with mean zero:

```{r intresid3, echo = TRUE, eval = TRUE, warning = FALSE, out.width = '90%', fig.align = "center", fig.cap = "Figure 11: Histograms of the residuals by gender."}
ggplot(regression.points, aes(x = residual)) +
  geom_histogram(binwidth = 0.25, color = "white") +
  labs(x = "Residual") +
  facet_wrap(~gender)
```

<br>

```{r MCQ52}
opts_Q52 <- c("Yes",
              answer = "No")
```

**Do the residuals appear to be normally distributed with mean zero?**
`r longmcq(opts_Q52)`

`r hide("Answer")`
Our subjective impression is that the residuals do not appear to be bell-shaped, but rather left-skewed (and more so for males). More formal analysis of the normality of the residuals should be pursued.
`r unhide()`

<br>
<br>


# Further Tasks: Multiple Linear Regression {-}

You are encouraged to complete the following tasks by using RMarkdown to produce a single document which summarises all your work, i.e. the original questions, your R code, your comments and reflections, etc.

<br>

**Task** Assess the model assumptions for the parallel regression lines model. Do they appear valid?

`r hide("Hint")`
Assess the model assumptions in the same way we did for the interaction model.
`r unhide()`

<br>

**Task** Return to the `Credit` data set and fit a multiple regression model with `Balance` as the outcome variable, and `Income` and `Age` as the explanatory variables, respectively. Assess the assumptions of the multiple regression model.

`r hide("Hint")`
Start by using the `select` function to subset the `Credit` data set so you only have the variables `Balance`, `Income` and `Age`. Remember to check the relationship between `Balance` and `Age` using a scatterplot before moving on to the modelling process.
`r unhide()`

<br>

**Task** Return to the `Credit` data set and fit a parallel regression lines model with `Balance` as the outcome variable, and `Income` and `Student` as the explanatory variables, respectively. Assess the assumptions of the fitted model.

<br>

**Task** Load the library `datasets` and look at the `iris` data set of Edgar Anderson containing measurements (in centimetres) on 150 different flowers across three different species of iris. Fit an interaction model with `Sepal.Width` as the outcome variable, and `Sepal.Length` and `Species` as the explanatory variables. Assess the assumptions of the fitted model.

`r hide("Hint")`
Start by using the `select` function to subset the `iris` data set so you only have the variables `Sepal.Width`, `Sepal.Length` and `Species`. Remember to first check the relationship between the variables using summary statistics and scatterplots before moving on to the modelling process.
`r unhide()`

<br>
<br>






